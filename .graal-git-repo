#!/usr/bin/python
# This is a self-updating script encoding the Graal+Truffle and mx repos and
# revision used for testing on CI. We don't use submodules to avoid a hard
# dependency that might bloat the repository of users of BlackDiamonds
#
# To checkout the repos, at the specified version for this version of the code,
#   run `./graal-git-repo checkout`
# To update this script, so its revisions point to the latest versions of the
#    configured repos, run `./graal-git-repo update-script-revs`
import sys
import os

# We use the following repositories
GRAAL_REPO_URL = "https://github.com/smarr/truffle.git"
MX_REPO_URL    = "https://github.com/graalvm/mx.git"

# And these are the repo revisions we test against
GRAAL_REPO_REV = "3ed852dd7266e1423e848b64673f906da2e70ed7"
MX_REPO_REV    = "41038233e53f5d47a857ee73a2227ff4de9ad1c3"


def update(lines, var, val):
    for idx, line in enumerate(lines):
        if line.startswith(var):
            print("Updating " + var + " to " + val)
            lines[idx] = var.ljust(15) + '= "' + val + '"\n'
            break


def run(cmd):
    print(cmd)
    return os.popen(cmd).read()


if len(sys.argv) == 1:
    print("To checkout the Graal+Truffle and MX dependencies use:")
    print("  " + __file__ + " checkout")
    print("To update the dependencies in this script use:")
    print("  " + __file__ + " update-script-revs")
    quit()

if sys.argv[1] == "update-script-revs":
    graal_head_data = run("git ls-remote " + GRAAL_REPO_URL + " HEAD")
    graal_head_rev = graal_head_data.split("\t")[0]

    mx_head_data = run("git ls-remote " + MX_REPO_URL + " HEAD")
    mx_head_rev = mx_head_data.split("\t")[0]

    with open(__file__, 'r') as script_file:
        content = script_file.readlines()
        update(content, 'GRAAL_REPO_REV', graal_head_rev)
        update(content, 'MX_REPO_REV',    mx_head_rev)

    with open(__file__, 'w') as script_file:
        script_file.writelines(content)


def update_repo(folder, repo, rev):
    folder = os.path.realpath(folder)
    if not os.path.isdir(folder):
        print("cloning " + repo)
        print(run("git clone --depth 5000 " + repo + " " + folder))
    run("git --git-dir=" + folder + "/.git --work-tree=" + folder +
        " fetch --depth 5000")
    print(run("git --git-dir=" + folder + "/.git --work-tree=" + folder +
              " reset --hard " + rev))

if sys.argv[1] == "checkout":
    update_repo("graal", GRAAL_REPO_URL, GRAAL_REPO_REV)
    update_repo("mx",    MX_REPO_URL,    MX_REPO_REV)
